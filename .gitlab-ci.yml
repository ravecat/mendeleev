image: docker:latest

cache:
  paths:
    - node_modules/

stages:
  - open_mr
  - build
  - test
  - close_mr
  - release
  - publish
  - deploy
  - cleaning

variables:
  IMAGE: ravecat/mendeleev
  APP_CONTAINER: mendeleev

open_mr_dependabot:
  image: node:10.13-alpine
  stage: open_mr
  tags:
    - docker
  only:
    - /^dependabot.*$/
  dependencies: []
  script:
    - apk add --no-cache bash python3 curl git
    - HOST=$CI_PROJECT_URL
      CI_PROJECT_ID=$CI_PROJECT_ID
      CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME
      GITLAB_USER_ID=$GITLAB_USER_ID
      PRIVATE_TOKEN=$GITLAB_TOKEN
      ./utils/open_mr_dependabot.sh

close_mr_dependabot:
  image: node:10.13-alpine
  stage: close_mr
  tags:
    - docker
  only:
    - /^dependabot.*$/
  dependencies: []
  script:
    - apk add --no-cache bash python3 curl
    - HOST=$CI_PROJECT_URL
      CI_PROJECT_ID=$CI_PROJECT_ID
      CI_PROJECT_NAME=$CI_PROJECT_NAME
      CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME
      GITHUB_OWNER=$GITHUB_OWNER
      GITLAB_USER_ID=$GITLAB_USER_ID
      PRIVATE_TOKEN=$GITLAB_TOKEN
      GITHUB_TOKEN=$GITHUB_REPO_TOKEN
      ./utils/close_mr_dependabot.sh

build_app:
  image: node:10.13-alpine
  stage: build
  artifacts:
    paths:
      - node_modules/
      - build/
    expire_in: 1d
  except:
    - develop
  tags:
    - docker
  dependencies: []
  script:
    - yarn

test_lint:
  image: node:10.13-alpine
  stage: test
  tags:
    - docker
  except:
    - master
    - develop
  dependencies:
    - build_app
  script:
    - yarn lint
    - yarn prettier

test_app:
  image: node:10.13-alpine
  stage: test
  tags:
    - docker
  except:
    - master
    - develop
  dependencies:
    - build_app
  script:
    - yarn test

release:
  image: node:10.13-alpine
  stage: release
  tags:
    - docker
  only:
    - master
  dependencies:
    - build_app
  script:
    - npm i -g yarn
    - apk add --no-cache git
    - GITLAB_TOKEN=$GITLAB_TOKEN yarn semantic-release

build_image:
  stage: publish
  tags:
    - docker
  only:
    - tags
  script:
    - echo "$(echo "$REGISTRY_PASSWORD" | base64 -d)" | docker login -u "$(echo "$REGISTRY_USER" | base64 -d)" --password-stdin
    - docker build -t $IMAGE .
    - docker push $IMAGE
    - docker logout

deploy:
  stage: deploy
  tags:
    - docker
  only:
    - tags
  variables:
    PORT: 3001
  script:
    - echo "$(echo "$REGISTRY_PASSWORD" | base64 -d)" | docker login -u "$(echo "$REGISTRY_USER" | base64 -d)" --password-stdin
    - apk add py-pip
    - apk add python-dev libffi-dev openssl-dev gcc libc-dev make
    - pip install docker-compose
    - docker-compose build --no-cache
    - docker-compose up -d
    - docker logout

cleaning:
  stage: cleaning
  tags:
    - docker
  only:
    - develop
  dependencies: []
  script:
    - docker info
    - docker system prune -af
